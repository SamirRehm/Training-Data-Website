p <- p %>% add_trace(x = RunningData[RunningData$RunType == "Tempo",]$Date, y = RunningData[RunningData$RunType == "Tempo",]$Distance, text = RunningData[RunningData$RunType == "Tempo",]$Pace, textposition = 'auto', marker = list(color = 'rgba(50, 100, 150, 0.6)', line = list(color = 'rgb(8,48,107)', width = 2)), name = "Tempo Surges")
}
p <- p %>% layout(barmode = "stack",  title = paste("<b>Training Plan Week", i, "-", signif(sum(RunningData$Distance), 4), "km", "</b>"), xaxis = list(title = "Date"), yaxis = list(title = "Distance (km)"), margin = m, legend = list(x=0, y=-0.15, xanchor='left', yanchor='top', orientation = 'h'))
p <- as_widget(p)
map <- (google_map(key = map_key, data = RunningData, width = 550, height = 500, zoom = 3) %>%
add_polylines(polyline = "Polylines", stroke_colour = "Day", stroke_weight = 4, stroke_opacity = 0.8, legend = T, palette = lstPalette))
trainingWeeks[[i]] <- tags$div(
style = "display: flex; flex-wrap: wrap",
tags$div(p, style = "width: 53%; padding: 1em; border: solid;"),
tags$div(map, style = "width: 47%; padding: 1em; border: solid;")
)
}
trainingWeeks
```
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], 17)
RunningData$Week <- ((as.numeric(difftime(RunningData$Date, i, units = "days"))) %/% 7) + 1
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], 17)
RunningData$Week <- ((as.numeric(difftime(RunningData$Date, i, units = "days"))) %/% 7) + 1
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], 17)
RunningData$Week <- ((as.numeric(difftime(RunningData$Date, i, units = "days"))) %/% 7) + 1
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
RunningDataList <- split(RunningData, RunningData$Week)
save(RunningDataList, file = "data.RData")
rmarkdown::render_site()
for (weekOfPlan in c(unique(OriginalRunningData$Week))){
rmarkdown::render('/Users/Samir Rehmtulla/Documents/Training-Data-Website/Week1AdvancedStatistics.Rmd',
output_file =  paste("report_", weekOfPlan, ".html", sep=''),
output_dir = '/Users/Samir Rehmtulla/Documents/Training-Data-Website')
}
library(rpart)
max(x)
x<- c(1,2,3,4,5)
max(x)
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams
tempoVelocityStreams <- TempoRuns$VelocityStreams
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, x = ~tempoTimeStreams, y = ~tempoVelocityStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
tempoData <- cbind(tempoData)
p <- p %>% add_trace()
}
plots <- htmltools::tagList()
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams
tempoVelocityStreams <- TempoRuns$VelocityStreams
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
tempoData <- cbind(tempoData)
p <- p %>% add_trace()
}
plots <- htmltools::tagList()
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoData$ ~ tempoTimeStreams)
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
tempoData <- cbind(tempoData)
p <- p %>% add_trace()
}
View(tempoData)
tempoData <- cbind(tempoData, s)
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(s, predict(tree, data.frame(x=s)))
p <- p %>% add_trace(data = pieceWise)
}
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(s, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise)
}
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(s, predict(tree, data.frame(s)))
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
print( predict(tree, data.frame(s)))
```{r advancedStatsTempo, echo=FALSE, warning=FALSE}
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise)
}
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
#p <- p %>% add_trace(data = pieceWise)
}
p
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
View(map)
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
library(webshot)
library(pander)
library(rpart)
knitr::opts_chunk$set(echo = TRUE)
load("Data.RData")
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
#p <- p %>% add_trace(data = pieceWise)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
#p <- p %>% add_trace(data = pieceWise)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
#p <- p %>% add_trace(data = pieceWise)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise, x = pieceWise$tempoTimeStreams, y = pieceWise$predict.tree..data.frame.s..)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = tempoTimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(s, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise, x = pieceWise$tempoTimeStreams, y = pieceWise$predict.tree..data.frame.s..)
}
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[i]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[i]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = tempoTimeStreams[[i]]/60, y = tempoVelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(s)))
p <- p %>% add_trace(data = pieceWise, x = pieceWise$tempoTimeStreams, y = pieceWise$predict.tree..data.frame.s..)
}
p
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
tempoTimeStreams <- TempoRuns$TimeStreams[[1]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[1]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[1]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[1]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(tempoTimeStreams)))
#p <- p %>% add_trace(data = pieceWise)
}
p
p
plots <- htmltools::tagList()
TempoRuns <- RunningWeek[RunningWeek$RunType == "Tempo",]
for(i in 1:nrow(TempoRuns)) {
tempoTimeStreams <- TempoRuns$TimeStreams[[1]]
tempoVelocityStreams <- TempoRuns$VelocityStreams[[1]]
tempoData <- data.frame(tempoTimeStreams, tempoVelocityStreams)
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[i]]/60, y = TempoRuns$VelocityStreams[[i]], type = "scatter", mode = "lines", name = "Raw Data")
tree <- rpart(data = tempoData, formula = tempoVelocityStreams ~ tempoTimeStreams)
s <- seq(0, max(tempoTimeStreams), by=.5)
pieceWise <- data.frame(tempoTimeStreams, predict(tree, data.frame(tempoTimeStreams)))
p <- p %>% add_trace(data = pieceWise)
}
p
p
p <- plot_ly(TempoRuns, height = 250, x = TempoRuns$TimeStreams[[1]]/60, y = TempoRuns$VelocityStreams[[1]], type = "scatter", mode = "lines", name = "Raw Data")
p
