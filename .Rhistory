lstPalette <- list(fill_colour = colorRampPalette(c("red","blue")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
lstPalette <- list(fill_colour = colorRampPalette(c("red","orange", "yellow", "green")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
lstPalette <- list(fill_colour = colorRampPalette(c("red","orange", "yellow", "green", "blue", "indigo", "violet")),
stroke_colour = viridisLite::plasma)
lstPalette <- list(fill_colour = colorRampPalette(c("red","orange", "yellow", "green", "blue", "violet")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
lstPalette <- list(fill_colour = colorRampPalette(c("red","orange", "yellow", "green", "cyan" "blue", "violet")),
stroke_colour = viridisLite::plasma)
lstPalette <- list(fill_colour = colorRampPalette(c("red","orange", "yellow", "green", "cyan", "blue", "violet")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
lstPalette <- list(fill_colour = colorRampPalette(c("#FF0000","orange", "yellow", "green", "cyan", "blue", "violet")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
lstPalette <- list(fill_colour = colorRampPalette(c("#FFFFF0","orange", "yellow", "green", "cyan", "blue", "violet")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
a <- c(a,a,a)
a <- c(a,a,a)
a<-c()
b<-c()
a <- c(a,a,a)
b <- c(b,b,b)
ab <- a + b
a <- c('a','a','a')
b <- c('b','b','b')
ab <- a + b
ab <- paste(a,b)
days <- daysofweek(start.day = "Monday")
days <- weekdays()
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
colour <- c()
for(i in 1:51) { colour[[i]] <- days[[i %% 7]]}
for(i in 1:51) { colour[[i]] <- days[[(i %% 7)+1]]}
data <- tram_stops
data$colour <- colour
lstPalette <- list(fill_colour = colorRampPalette(c("#FFFFF0","orange", "yellow", "green", "cyan", "blue", "violet")),
stroke_colour = viridisLite::plasma)
google_map(data = data) %>%
add_circles(lat = "stop_lat", lon = "stop_lon", fill_colour = "colour",
stroke_colour = "stop_name",
legend = T, palette = lstPalette,
legend_options = list(
fill_colour = list(position = "TOP_RIGHT", css = "max-height: 100px;"),
stroke_colour = list(position = "LEFT_BOTTOM", title = "Stop Name")
))
rm(list=ls())
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
library(jsonlite)
rm(list=ls())
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
library(leaflet)
library(sp)
library(data.table)
library(googleway)
library(RgoogleMaps)
library(jsonlite)
library(httr)
rm(list=ls())
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
w <- rep("hello", 10)
rm(list=ls())
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
print(PolylineURLs[[1]])
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
print(PolylineURLs[[1]])
print(PolylineURLs[[14]])
for(i in length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$polyline))
}
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])))
result <- GET(url = PolylineURLs[[1]])
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))
polylines <- c()
for(i in length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))
polylines[[i]] <- Activity$map$polyline
}
print(Activity$map)
print(Activity$map$polyline)
for(i in length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
polylines[[i]] <- Activity$polyline
}
for(i in length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
print(Activity$polyline)
polylines[[i]] <- Activity$polyline
}
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
print(Activity$polyline)
polylines[[i]] <- Activity$polyline
}
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("rest", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
Polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
print(Activity$polyline)
Polylines[[i]] <- Activity$polyline
}
Polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
Polylines[[i]] <- Activity$polyline
}
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
print(Activity$polyline)
polylines[[i]] <- Activity$polyline
}
polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ polylines[[i]] <- "" } else { polylines[[i]] <- Activity$polyline}
}
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("rest", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
Polylines <- c()
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("rest", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
Polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
View(RunningData)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(leaflet)
library(sp)
library(data.table)
library(googleway)
set_key(key = 'AIzaSyC2_ZQpyvUMYMm2FZh3HouwqavsnF8QRG4')
google_map(data = RunningData) %>%
add_polylines(polyline = "Polylines")
x <- google_map(data = RunningData) %>%
add_polylines(polyline = "Polylines")
x
google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines")
map_key <- 'AIzaSyC2_ZQpyvUMYMm2FZh3HouwqavsnF8QRG4'
google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines")
map_key <- 'AIzaSyC2_ZQpyvUMYMm2FZh3HouwqavsnF8QRG4'
google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines")
map_key <- 'AIzaSyC2_ZQpyvUMYMm2FZh3HouwqavsnF8QRG4'
google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines", stroke_colour = "red")
map_key <- 'AIzaSyC2_ZQpyvUMYMm2FZh3HouwqavsnF8QRG4'
google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines", stroke_colour = "#00FFFF")
x <- google_map(key = map_key, data = RunningData) %>%
add_polylines(polyline = "Polylines", stroke_colour = "#00FFFF")
x
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(leaflet)
library(sp)
library(data.table)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("rest", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("?access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP2, sep="")
Polylines <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
View(RunningData)
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/yaml")
library(yaml)
install.packages("yaml")
install.packages("yaml")
devtools::install_github("rstudio/rmarkdown")
install.packages("base64enc", type="binary")
install.packages("jsonlite", type="binary")
devtools::install_github("rstudio/rmarkdown")
rsconnect::deployApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::deployApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rsconnect::deployApp("TrainingDataShiny")
shiny::runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
rsconnect::deployApp()
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
shiny::runApp('TrainingDataShiny')
library(shiny)
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
runApp('TrainingDataShiny')
rsconnect::deployApp("TrainingDataShiny")
rsconnect::deployApp("TrainingDataShiny")
setwd("/Users/Samir Rehmtulla/Documents/Training-Data-Website")
library(httr)
library(jsonlite)
library(lubridate)
library(plotly)
library(stringr)
library(plyr)
library(sp)
library(googleway)
rm(list=ls())
options(stringsAsFactors = FALSE)
RActivites <- fromJSON(rawToChar(GET(url = "https://www.strava.com/api/v3/athlete/activities?after=1519601753&per_page=80&access_token=738ba7d3a2a53c870f699ae5a297383eef11f537")$content))
RActivites$start_date_local <- strtrim(RActivites$start_date_local, 10)
steadyRuns <- grep("steady", RActivites$name, ignore.case = TRUE)
restRuns <- grep("recovery", RActivites$name, ignore.case = TRUE)
workRuns <- grep("work", RActivites$name, ignore.case = TRUE)
tempoRuns <- grep("tempo", RActivites$name, ignore.case = TRUE)
trackRuns <- grep("track", RActivites$name, ignore.case = TRUE)
longRuns <- grep("Long", RActivites$name, ignore.case = TRUE)
intenseRuns <- grep("intense", RActivites$name, ignore.case = TRUE)
WarmupRuns <- grep("warm", RActivites$name, ignore.case = TRUE)
CooldownRuns <- grep("cool", RActivites$name, ignore.case = TRUE)
ids <- RActivites$id
urlP1 <- rep("https://www.strava.com/api/v3/activities/", length(ids))
urlP2 <- rep("access_token=738ba7d3a2a53c870f699ae5a297383eef11f537", length(ids))
urlP3 <- rep("?", length(ids))
urlP4 <- rep("/streams?keys=time,distance,velocity_smooth&key_by_type=true&", length(ids))
PolylineURLs <- paste(urlP1, ids, urlP3, urlP2, sep="")
StreamURLs <- paste(urlP1, ids, urlP4, urlP2, sep= "")
Polylines <- c()
DistanceStreams <- c()
TimeStreams <- c()
VelocityStreams <- c()
for(i in 1:length(PolylineURLs)) {
Activity <- fromJSON(rawToChar(GET(url = PolylineURLs[[i]])$content))$map
if(is.null(Activity$polyline))
{ Polylines[[i]] <- "" } else { Polylines[[i]] <- Activity$polyline}
}
for(i in 1:length(StreamURLs)) {
Activity <- fromJSON(rawToChar(GET(url = StreamURLs[[i]])$content))
DistanceStream <- Activity$distance$data
TimeStream <- Activity$time$data
VelocityStream <- Activity$velocity_smooth$data
if(is.null(DistanceStream))
{ DistanceStreams[[i]] <- 0 } else { DistanceStreams[[i]] <- DistanceStream}
if(is.null(TimeStream))
{ TimeStreams[[i]] <- 0 } else { TimeStreams[[i]] <- TimeStream}
if(is.null(VelocityStream))
{ VelocityStreams[[i]] <- 0 } else { VelocityStreams[[i]] <- VelocityStream}
}
RunType <- vector(mode = "character", length = nrow(RActivites))
for(i in 1:length(RunType)) {
if(i %in% steadyRuns) { RunType[[i]] <- "Steady"}
else if(i %in% intenseRuns) { RunType[[i]] <- "Intense" }
else if(i %in% tempoRuns) { RunType[[i]] <- "Tempo" }
else if(i %in% trackRuns) { RunType[[i]] <- "Track" }
else if (i %in% longRuns) { RunType[[i]] <- "Long"}
else if(i %in% workRuns) { RunType[[i]] <- 'Work' }
else if(i %in% restRuns) { RunType[[i]] <- "Rest" }
else if(i %in% WarmupRuns) { RunType[[i]] <- "Warm-up"}
else if(i %in% CooldownRuns) { RunType[[i]] <- "Cool-down"}
else { RunType[[i]] <- "Misc"}
}
Pace <- RActivites$moving_time/RActivites$distance/60*1000
Pace <- paste("<b>", floor(Pace), ":", str_pad(round((Pace - floor(Pace))*60), 2, pad = "0"), "/km", "</b>", sep = "")
RunningData <- data.frame(RActivites$start_date_local, RActivites$distance/1000.0, RActivites$moving_time, RunType, Pace, Polylines)
RunningData <- rename(RunningData, c("RActivites.start_date_local" = "Date", "RActivites.distance.1000" = "Distance", "RActivites.moving_time" = "Time"))
RunningData$Day <- weekdays(as.Date(RunningData$Date))
i <- rep(RunningData$Date[[1]], nrow(RunningData))
RunningData$Week <- as.numeric(floor(difftime(RunningData$Date, i, units = "weeks") + 0.01) + 1)
RunningData$DistanceStreams <- DistanceStreams
RunningData$TimeStreams <- TimeStreams
RunningData$VelocityStreams <- VelocityStreams
OriginalRunningData <- RunningData
write.csv(OriginalRunningData, "RunningData.csv")
save(OriginalRunningData, file = "Runningdata.RData")
load("Runningdata.RData")
load("Runningdata.RData")
View(RunningData)
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
load("Runningdata.RData")
rm(list=ls())
load("Runningdata.RData")
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
install.packages("data.table")
install.packages("DT")
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
runApp('~/TrainingDataShiny')
